From 313c7a888995509bfb6ad25251663d8281e6e124 Mon Sep 17 00:00:00 2001
From: Todd Lipcon <todd@apache.org>
Date: Fri, 10 Sep 2010 05:48:39 +0000
Subject: [PATCH 12/30] HBASE-2977. Refactor master command line to a new class

---
 .../org/apache/hadoop/hbase/master/HMaster.java    |  128 ++----------
 .../hadoop/hbase/master/HMasterCommandLine.java    |  221 ++++++++++++++++++++
 .../apache/hadoop/hbase/master/OOMEHMaster.java    |    2 +-
 3 files changed, 235 insertions(+), 116 deletions(-)
 create mode 100644 src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java

diff --git a/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index a177770..bdcd786 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -21,8 +21,6 @@ package org.apache.hadoop.hbase.master;
 
 import java.io.File;
 import java.io.IOException;
-import java.lang.management.ManagementFactory;
-import java.lang.management.RuntimeMXBean;
 import java.lang.reflect.Constructor;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
@@ -37,16 +35,13 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import org.apache.commons.cli.CommandLine;
-import org.apache.commons.cli.GnuParser;
-import org.apache.commons.cli.Options;
-import org.apache.commons.cli.ParseException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.util.ToolRunner;
 import org.apache.hadoop.hbase.ClusterStatus;
 import org.apache.hadoop.hbase.HBaseConfiguration;
 import org.apache.hadoop.hbase.HColumnDescriptor;
@@ -1262,114 +1257,6 @@ public class HMaster extends Thread implements HMasterInterface,
     }
   }
 
-  protected static void doMain(String [] args,
-      Class<? extends HMaster> masterClass) {
-    Configuration conf = HBaseConfiguration.create();
-
-    Options opt = new Options();
-    opt.addOption("minServers", true, "Minimum RegionServers needed to host user tables");
-    opt.addOption("D", true, "Override HBase Configuration Settings");
-    opt.addOption("backup", false, "Do not try to become HMaster until the primary fails");
-    try {
-      CommandLine cmd = new GnuParser().parse(opt, args);
-
-      if (cmd.hasOption("minServers")) {
-        String val = cmd.getOptionValue("minServers");
-        conf.setInt("hbase.regions.server.count.min",
-            Integer.valueOf(val));
-        LOG.debug("minServers set to " + val);
-      }
-
-      if (cmd.hasOption("D")) {
-        for (String confOpt : cmd.getOptionValues("D")) {
-          String[] kv = confOpt.split("=", 2);
-          if (kv.length == 2) {
-            conf.set(kv[0], kv[1]);
-            LOG.debug("-D configuration override: " + kv[0] + "=" + kv[1]);
-          } else {
-            throw new ParseException("-D option format invalid: " + confOpt);
-          }
-        }
-      }
-      
-      // check if we are the backup master - override the conf if so
-      if (cmd.hasOption("backup")) {
-        conf.setBoolean(HConstants.MASTER_TYPE_BACKUP, true);
-      }
-
-      if (cmd.getArgList().contains("start")) {
-        try {
-          // Print out vm stats before starting up.
-          RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();
-          if (runtime != null) {
-            LOG.info("vmName=" + runtime.getVmName() + ", vmVendor=" +
-              runtime.getVmVendor() + ", vmVersion=" + runtime.getVmVersion());
-            LOG.info("vmInputArguments=" + runtime.getInputArguments());
-          }
-          // If 'local', defer to LocalHBaseCluster instance.  Starts master
-          // and regionserver both in the one JVM.
-          if (LocalHBaseCluster.isLocal(conf)) {
-            final MiniZooKeeperCluster zooKeeperCluster =
-              new MiniZooKeeperCluster();
-            File zkDataPath = new File(conf.get("hbase.zookeeper.property.dataDir"));
-            int zkClientPort = conf.getInt("hbase.zookeeper.property.clientPort", 0);
-            if (zkClientPort == 0) {
-              throw new IOException("No config value for hbase.zookeeper.property.clientPort");
-            }
-            zooKeeperCluster.setTickTime(conf.getInt("hbase.zookeeper.property.tickTime", 3000));
-            zooKeeperCluster.setClientPort(zkClientPort);
-            int clientPort = zooKeeperCluster.startup(zkDataPath);
-            if (clientPort != zkClientPort) {
-              String errorMsg = "Couldnt start ZK at requested address of " +
-                  zkClientPort + ", instead got: " + clientPort + ". Aborting. Why? " +
-                  "Because clients (eg shell) wont be able to find this ZK quorum";
-              System.err.println(errorMsg);
-              throw new IOException(errorMsg);
-            }
-            conf.set("hbase.zookeeper.property.clientPort",
-              Integer.toString(clientPort));
-            // Need to have the zk cluster shutdown when master is shutdown.
-            // Run a subclass that does the zk cluster shutdown on its way out.
-            LocalHBaseCluster cluster = new LocalHBaseCluster(conf, 1,
-              LocalHMaster.class, HRegionServer.class);
-            ((LocalHMaster)cluster.getMaster()).setZKCluster(zooKeeperCluster);
-            cluster.startup();
-          } else {
-            HMaster master = constructMaster(masterClass, conf);
-            if (master.shutdownRequested.get()) {
-              LOG.info("Won't bring the Master up as a shutdown is requested");
-              return;
-            }
-            master.start();
-          }
-        } catch (Throwable t) {
-          LOG.error("Failed to start master", t);
-          System.exit(-1);
-        }
-      } else if (cmd.getArgList().contains("stop")) {
-        HBaseAdmin adm = null;
-        try {
-          adm = new HBaseAdmin(conf);
-        } catch (MasterNotRunningException e) {
-          LOG.error("Master not running");
-          System.exit(0);
-        }
-        try {
-          adm.shutdown();
-        } catch (Throwable t) {
-          LOG.error("Failed to stop master", t);
-          System.exit(-1);
-        }
-      } else {
-        throw new ParseException("Unknown argument(s): " +
-            org.apache.commons.lang.StringUtils.join(cmd.getArgs(), " "));
-      }
-    } catch (ParseException e) {
-      LOG.error("Could not parse: ", e);
-      printUsageAndExit();
-    }
-  }
-
   public Map<String, Integer> getTableFragmentation() throws IOException {
     long now = System.currentTimeMillis();
     // only check every two minutes by default
@@ -1380,12 +1267,23 @@ public class HMaster extends Thread implements HMasterInterface,
     }
     return fragmentation;
   }
+  
+  protected static void doMain(String [] args,
+      Class<? extends HMaster> masterClass) throws Exception {
+    int ret = ToolRunner.run(
+      HBaseConfiguration.create(),
+      new HMasterCommandLine(masterClass),
+      args);
+    if (ret != 0) {
+      System.exit(ret);
+    }
+  }
 
   /**
    * Main program
    * @param args
    */
-  public static void main(String [] args) {
+  public static void main(String [] args) throws Exception {
     doMain(args, HMaster.class);
   }
 }
diff --git a/src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java b/src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java
new file mode 100644
index 0000000..415a0f5
--- /dev/null
+++ b/src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java
@@ -0,0 +1,221 @@
+/**
+ * Copyright 2010 The Apache Software Foundation
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.master;
+
+import java.io.IOException;
+import java.io.File;
+import java.lang.management.RuntimeMXBean;
+import java.lang.management.ManagementFactory;
+import java.util.List;
+
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.GnuParser;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.ParseException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.conf.Configured;
+import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HConstants;
+import org.apache.hadoop.hbase.LocalHBaseCluster;
+import org.apache.hadoop.hbase.MasterNotRunningException;
+import org.apache.hadoop.hbase.client.HBaseAdmin;
+import org.apache.hadoop.hbase.regionserver.HRegionServer;
+import org.apache.hadoop.hbase.zookeeper.MiniZooKeeperCluster;
+import org.apache.zookeeper.KeeperException;
+
+public class HMasterCommandLine extends Configured implements Tool {
+  private static final Log LOG = LogFactory.getLog(HMasterCommandLine.class);
+
+  private static final String USAGE =
+    "Usage: Master [opts] start|stop\n" +
+    " start  Start Master. If local mode, start Master and RegionServer in same JVM\n" +
+    " stop   Start cluster shutdown; Master signals RegionServer shutdown\n" +
+    " where [opts] are:\n" +
+    "   --minServers=<servers>    Minimum RegionServers needed to host user tables.\n" +
+    "   --backup                  Master should start in backup mode";
+
+  private final Class<? extends HMaster> masterClass;
+
+
+  public HMasterCommandLine(Class<? extends HMaster> masterClass) {
+    this.masterClass = masterClass;
+  }
+
+  private void usage(String message) {
+    if (message != null) {
+      System.err.println(message);
+      System.err.println("\n");
+    }
+
+    System.err.println(USAGE);
+  }
+
+  private static void logJVMInfo() {
+    // Print out vm stats before starting up.
+    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();
+    if (runtime != null) {
+      LOG.info("vmName=" + runtime.getVmName() + ", vmVendor=" +
+               runtime.getVmVendor() + ", vmVersion=" + runtime.getVmVersion());
+      LOG.info("vmInputArguments=" + runtime.getInputArguments());
+    }
+  }
+
+  public int run(String args[]) throws Exception {
+    Options opt = new Options();
+    opt.addOption("minServers", true, "Minimum RegionServers needed to host user tables");
+    opt.addOption("backup", false, "Do not try to become HMaster until the primary fails");
+
+
+    CommandLine cmd;
+    try {
+      cmd = new GnuParser().parse(opt, args);
+    } catch (ParseException e) {
+      LOG.error("Could not parse: ", e);
+      usage(null);
+      return -1;
+    }
+
+
+    if (cmd.hasOption("minServers")) {
+      String val = cmd.getOptionValue("minServers");
+      getConf().setInt("hbase.regions.server.count.min",
+                  Integer.valueOf(val));
+      LOG.debug("minServers set to " + val);
+    }
+
+    // check if we are the backup master - override the conf if so
+    if (cmd.hasOption("backup")) {
+      getConf().setBoolean(HConstants.MASTER_TYPE_BACKUP, true);
+    }
+
+    List<String> remainingArgs = cmd.getArgList();
+    if (remainingArgs.size() != 1) {
+      usage(null);
+      return -1;
+    }
+
+    String command = remainingArgs.get(0);
+
+    if ("start".equals(command)) {
+      return startMaster();
+    } else if ("stop".equals(command)) {
+      return stopMaster();
+    } else {
+      usage("Invalid command: " + command);
+      return -1;
+    }
+  }
+
+  private int startMaster() {
+    Configuration conf = getConf();
+    try {
+      // If 'local', defer to LocalHBaseCluster instance.  Starts master
+      // and regionserver both in the one JVM.
+      if (LocalHBaseCluster.isLocal(conf)) {
+        final MiniZooKeeperCluster zooKeeperCluster =
+          new MiniZooKeeperCluster();
+        File zkDataPath = new File(conf.get("hbase.zookeeper.property.dataDir"));
+        int zkClientPort = conf.getInt("hbase.zookeeper.property.clientPort", 0);
+        if (zkClientPort == 0) {
+          throw new IOException("No config value for hbase.zookeeper.property.clientPort");
+        }
+        zooKeeperCluster.setTickTime(conf.getInt("hbase.zookeeper.property.tickTime", 3000));
+        zooKeeperCluster.setClientPort(zkClientPort);
+        int clientPort = zooKeeperCluster.startup(zkDataPath);
+        if (clientPort != zkClientPort) {
+          String errorMsg = "Couldnt start ZK at requested address of " +
+            zkClientPort + ", instead got: " + clientPort + ". Aborting. Why? " +
+            "Because clients (eg shell) wont be able to find this ZK quorum";
+          System.err.println(errorMsg);
+          throw new IOException(errorMsg);
+        }
+        conf.set("hbase.zookeeper.property.clientPort",
+                 Integer.toString(clientPort));
+        // Need to have the zk cluster shutdown when master is shutdown.
+        // Run a subclass that does the zk cluster shutdown on its way out.
+        LocalHBaseCluster cluster = new LocalHBaseCluster(conf, 1,
+                                                          LocalHMaster.class, HRegionServer.class);
+        ((LocalHMaster)cluster.getMaster()).setZKCluster(zooKeeperCluster);
+        cluster.startup();
+      } else {
+        HMaster master = HMaster.constructMaster(masterClass, conf);
+        if (master.getShutdownRequested().get()) {
+          LOG.info("Won't bring the Master up as a shutdown is requested");
+          return -1;
+        }
+        master.start();
+        master.join();
+      }
+    } catch (Throwable t) {
+      LOG.error("Failed to start master", t);
+      return -1;
+    }
+    return 0;
+  }
+
+  private int stopMaster() {
+    HBaseAdmin adm = null;
+    try {
+      adm = new HBaseAdmin(getConf());
+    } catch (MasterNotRunningException e) {
+      LOG.error("Master not running");
+      return -1;
+    }
+    try {
+      adm.shutdown();
+    } catch (Throwable t) {
+      LOG.error("Failed to stop master", t);
+      return -1;
+    }
+    return 0;
+  }
+
+  /*
+   * Version of master that will shutdown the passed zk cluster on its way out.
+   */
+  static class LocalHMaster extends HMaster {
+    private MiniZooKeeperCluster zkcluster = null;
+
+    public LocalHMaster(Configuration conf)
+    throws IOException, KeeperException, InterruptedException {
+      super(conf);
+    }
+
+    @Override
+    public void run() {
+      super.run();
+      if (this.zkcluster != null) {
+        try {
+          this.zkcluster.shutdown();
+        } catch (IOException e) {
+          e.printStackTrace();
+        }
+      }
+    }
+
+    void setZKCluster(final MiniZooKeeperCluster zkcluster) {
+      this.zkcluster = zkcluster;
+    }
+  }
+}
\ No newline at end of file
diff --git a/src/test/java/org/apache/hadoop/hbase/master/OOMEHMaster.java b/src/test/java/org/apache/hadoop/hbase/master/OOMEHMaster.java
index 607a2f0..a6f148e 100644
--- a/src/test/java/org/apache/hadoop/hbase/master/OOMEHMaster.java
+++ b/src/test/java/org/apache/hadoop/hbase/master/OOMEHMaster.java
@@ -53,7 +53,7 @@ public class OOMEHMaster extends HMaster {
   /**
    * @param args
    */
-  public static void main(String[] args) {
+  public static void main(String[] args) throws Exception {
     doMain(args, OOMEHMaster.class);
   }
 }
-- 
1.7.0.4

